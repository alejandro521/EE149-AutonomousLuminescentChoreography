target C {
  platform: {
      name: "rp2040",
      board: "pololu_3pi_2040_robot"
  },
  threading: false,
}

import Display from "lib/Display.lf"

preamble {=
  #include <stdio.h>
  #include <pico/stdlib.h>
  #include <hardware/gpio.h>
  #include <hardware/uart.h>
  #include <hardware/structs/uart.h>

  #define BAUD_RATE 9600
  #define UART_TX_PIN 28
  #define UART_RX_PIN 29

  // Function to send AT command and return the command string
  static char* sendATCommand(uart_inst_t *uart, const char *command) {
    const char *tempCommand = command;
    while (*tempCommand) {
      uart_putc(uart, *tempCommand++);
    }
    uart_putc(uart, '\r'); // Carriage return to execute the command
    return command;
  }

  // Function to read response from UART and return the response string
  static char* readUARTResponse(uart_inst_t *uart, char *response, int maxLength) {
    int count = 0;
    while (uart_is_readable(uart) && count < maxLength - 1) {
        response[count++] = uart_getc(uart);
    }
    response[count] = '\0'; // Null terminate the string
    return response;
  }
=}

main reactor {
  timer t(0, 50 ms);
  state led_on:bool = false;
  state message_sent:char[100] = "";
  state message_received:char[100] = "";
  disp = new Display();

  reaction(startup) {=
    uart_init(uart0, BAUD_RATE);
    gpio_set_function(UART_TX_PIN, GPIO_FUNC_UART);
    gpio_set_function(UART_RX_PIN, GPIO_FUNC_UART);

    gpio_init(PICO_DEFAULT_LED_PIN);
    gpio_set_dir(PICO_DEFAULT_LED_PIN, GPIO_OUT);

    // Send AT+NAMEPololu command
    const char* setNameCmd = "AT+NAMEPololu1";
    strcpy(self->message_sent, sendATCommand(uart0, setNameCmd));
    // strcpy(self->message_received, readUARTResponse(uart0, response, sizeof(response)));
  =}


  reaction(t) -> disp.line0, disp.line1, disp.line2 {=
    // Display on the Pololu's screen
    lf_set(disp.line0, "Changing name...");
    
    static char response[100]; // Buffer for UART response
    if (uart_is_readable(uart0)) {
        readUARTResponse(uart0, response, sizeof(response));
        strcpy(self->message_received, response);
    }

    // Assuming message_sent and message_received are updated elsewhere
    static char buf_sent[17];
    snprintf(buf_sent, 17, "S:%s", self->message_sent);
    lf_set(disp.line1, buf_sent);

    static char buf_received[17];
    snprintf(buf_received, 17, "R:%s", self->message_received);
    lf_set(disp.line2, buf_received);
    
    self->led_on = !self->led_on;
    gpio_put(PICO_DEFAULT_LED_PIN, self->led_on);
  =}
}
target C {
    platform: {
      name: "rp2040",
      board: "pololu_3pi_2040_robot"
    },
    threading: false,
  }

  import Display from "lib/Display.lf"
  
  preamble {=
    #include <stdio.h>
    #include <pico/stdlib.h>
    #include <hardware/gpio.h>
    #include <hardware/structs/uart.h>
    #include <hardware/regs/dreq.h>

    #define BAUD_RATE 9600
    #define UART_TX_PIN 28
    #define UART_RX_PIN 29
  =}

main reactor {
    timer t(0, 250 ms);
    state led_on:bool = false;
    disp = new Display();
    reaction(startup)-> disp.line0, disp.line1 {=
     //Set up UART and set pins
        lf_set(disp.line0, "START UP");
        uart_init(uart0, BAUD_RATE);
        gpio_init(UART_TX_PIN);
        gpio_set_function(UART_TX_PIN, GPIO_FUNC_UART);
        gpio_init(UART_RX_PIN);
        gpio_set_function(UART_RX_PIN, GPIO_FUNC_UART);

        gpio_init(PICO_DEFAULT_LED_PIN);
        gpio_set_dir(PICO_DEFAULT_LED_PIN, GPIO_OUT);

        const char* setNameCmd = "AT+NAME?";
        static char buf[17];
        if (!uart_is_enabled(uart0) || !uart_is_writable(uart0)) {
          lf_set(disp.line0, "UART NOT ENABLED OR WRITABLE");
        }
        for (const char* c = setNameCmd; *c != '\n'; ++c) {
            uart_putc(uart0, *c); // Send each character of the command
            // printf("char in send: %c", c);
            snprintf(buf, 17, "char sent:%c", c);
            lf_set(disp.line1, buf);
        }
        uart_putc(uart0, '\r'); // Carriage return to execute the command
    =}

    reaction(t) -> disp.line0, disp.line2, disp.line3 {=
        self->led_on = !self->led_on;
        // printf("LED State: %b/n", self->led_on);
        // lf_set(disp.line1, "LED STATE: ");
        gpio_put(PICO_DEFAULT_LED_PIN, !self->led_on);
        char tempStr[10];
        static char buf[17];
        int i = 0;
        // while (1) {
        //     char d[17] = uart_getc(uart0); // read each character of the command
        //     // printf("char: %c", c);
        //     // snprintf(buf, 1, "char recevied: %c", d);
        //     lf_set(disp.line2, d);
        //     break;
        //     // if (c == '\n') {
        //     //   tempStr[i] = c;
        //     // }
        //     // else {
        //     //   break; 
        //     // }
        //     // i += 1;
        // }
        lf_set(disp.line3, "DONE");
        printf("Check connection and read name: %s\n", tempStr);
    =}
}
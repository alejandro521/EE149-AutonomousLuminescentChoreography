target C {
  platform: {
      name: "rp2040",
      board: "pololu_3pi_2040_robot"
  },
  threading: false,
}

import Pololu from "Pololu.lf"
import Bluetooth from "Bluetooth.lf"
import Display from "../lib/Display.lf"

preamble {=
  #include <stdio.h>
  #include <pico/stdlib.h>
  #include <hardware/gpio.h>
  
  static bool matchesCommand(str, command) {
    return strncmp(command, str, strlen(command)) == 0;
  }
=}

main reactor {
  pololu = new Pololu();
  bluetooth = new Bluetooth();
  disp = new Display();
  timer t(0, 25 ms);

  state TURN_LEFT_COMMAND:char[20] = "TURN_LEFT:";
  state TURN_RIGHT_COMMAND:char[20] = "TURN_RIGHT:";
  state MOVE_FORWARD_COMMAND:char[20] = "MOVE_FORWARD:";
  state MOVE_BACKWARD_COMMAND:char[20] = "MOVE_BACKWARD:";
  state STOP_COMMAND:char[20] = "STOP:";

  // reaction(t) pololu.facing_angle, pololu.current_mode -> disp.line0, disp.line1 {=
  //   static char mode_buf[17];
  //   snprintf(mode_buf, 17, "Mode: %d", pololu.current_mode->value);
  //   lf_set(disp.line0, mode_buf);

  //   static char angle_buf[17];
  //   snprintf(angle_buf, 17, "Angle: %.2f", pololu.facing_angle->value);
  //   lf_set(disp.line1, angle_buf);
  // =}

  reaction(bluetooth.incoming_message) -> disp.line0, disp.line1, pololu.drive_mode, pololu.drive_direction, pololu.drive_amount, bluetooth.outgoing_message {=
    static char inc_msg_buf[17];
    snprintf(inc_msg_buf, 17, "C: %s", bluetooth.incoming_message->value);
    lf_set(disp.line0, inc_msg_buf);

    float amount = 0.0f;

    if (matchesCommand(bluetooth.incoming_message->value, self->TURN_LEFT_COMMAND)) {
      amount = atof(bluetooth.incoming_message->value + strlen(self->TURN_LEFT_COMMAND));
      lf_set(pololu.drive_mode, 2);
      lf_set(pololu.drive_direction, 0);
      lf_set(bluetooth.outgoing_message, "Turned left");
    } else if (matchesCommand(bluetooth.incoming_message->value, self->TURN_RIGHT_COMMAND)) {
      amount = atof(bluetooth.incoming_message->value + strlen(self->TURN_RIGHT_COMMAND));
      lf_set(pololu.drive_mode, 2);
      lf_set(pololu.drive_direction, 1);
      lf_set(bluetooth.outgoing_message, "Turned right");
    } else if (matchesCommand(bluetooth.incoming_message->value, self->MOVE_FORWARD_COMMAND)) {
      amount = atof(bluetooth.incoming_message->value + strlen(self->MOVE_FORWARD_COMMAND));
      lf_set(pololu.drive_mode, 1);
      lf_set(pololu.drive_direction, 0);
      lf_set(bluetooth.outgoing_message, "Moved forward");
    } else if (matchesCommand(bluetooth.incoming_message->value, self->MOVE_BACKWARD_COMMAND)) {
      amount = atof(bluetooth.incoming_message->value + strlen(self->MOVE_BACKWARD_COMMAND));
      lf_set(pololu.drive_mode, 1);
      lf_set(pololu.drive_direction, 1);
      lf_set(bluetooth.outgoing_message, "Moved backward");
    }

    lf_set(pololu.drive_amount, amount);
    static char amount_buf[17];
    snprintf(amount_buf, 17, "A: %0.2f", amount);
    lf_set(disp.line1, amount_buf);
  =}

  reaction(pololu.current_mode) -> disp.line2 {=
    static char mode_buf[17];
    snprintf(mode_buf, 17, "M: %s", pololu.current_mode->value);
    lf_set(disp.line2, mode_buf);
  =}

  reaction(pololu.facing_angle) -> disp.line3 {=
    static char angle_buf[17];
    snprintf(angle_buf, 17, "F: %0.2f", pololu.facing_angle->value);
    lf_set(disp.line3, angle_buf);
  =}
}
target C {
    platform: {
        name: "rp2040",
        board: "pololu_3pi_2040_robot"
    },
    threading: false,
  }
  
  preamble {=
    #ifndef BLUETOOTH_FUNCTIONS_H
    #define BLUETOOTH_FUNCTIONS_H
    #include <stdio.h>
    #include <pico/stdlib.h>
    #include <hardware/gpio.h>
    #include <hardware/uart.h>
    #include <hardware/structs/uart.h>
  
    #define BAUD_RATE 9600
    #define UART_TX_PIN 28
    #define UART_RX_PIN 29
    #define MAX_MSG_LENGTH 100
  
    // Function to send a message. The message that was transmitted is written to transmitted_message
    static void transmitMessage(uart_inst_t *uart, char *message, char *transmitted_message) {
      int index = 0;
      while (*message && index < MAX_MSG_LENGTH) {
        uart_putc(uart, *message);
        transmitted_message[index] = *message;
        index++;
        message++;
      }
      uart_putc(uart, '\r'); // Carriage return
      transmitted_message[index] = '\0';
    }
  
    // Function to write response from UART to incoming_message, returns true if there is a new message
    static bool receiveMessage(uart_inst_t *uart, char *incoming_message) {
      int index = 0;
      char received_char = 'a'; //'a' is just to initialize received_char to a character that is not \r
      char end_char = '\r';
      bool received_new_message = false;
      if (uart_is_readable(uart)) {
        while (received_char != end_char) { 
          received_char = uart_getc(uart);
          if (index < MAX_MSG_LENGTH - 1 && received_char != end_char) {
            incoming_message[index] = received_char;
            index += 1;
          }
        }
        received_new_message = true;
      } 
      incoming_message[index] = '\0'; // Null terminate the string
      return received_new_message;
    }

    #endif // BLUETOOTH_FUNCTIONS_H
  =}
  
    reactor Bluetooth {
      input message_send_trigger:bool;
      input outgoing_message:char[100];
      output message_received_trigger:bool;
      output incoming_message:char[100];
      
      timer t(0, 50 ms);
      state transmitted_message:char[100] = ""; //shows message that got sent without errors. Meant for debugging

    reaction(startup) -> message_received_trigger {=
      uart_init(uart0, BAUD_RATE);
      gpio_set_function(UART_TX_PIN, GPIO_FUNC_UART);
      gpio_set_function(UART_RX_PIN, GPIO_FUNC_UART);

      gpio_init(PICO_DEFAULT_LED_PIN);
      gpio_set_dir(PICO_DEFAULT_LED_PIN, GPIO_OUT);

      lf_set(message_received_trigger, false);
      // Clear UART buffer
      while (uart_is_readable(uart0)) {
        uart_getc(uart0);
      }
    =} 
  
    reaction(t) -> incoming_message, message_received_trigger {=
      if (receiveMessage(uart0, incoming_message->value)) {
        lf_set(message_received_trigger, !message_received_trigger);
      };
    =}
  
    reaction(message_send_trigger) outgoing_message {=
      transmitMessage(uart0, outgoing_message, self->transmitted_message);
    =}
  }